OSTEP CHAPTER REVIEW: Dylan Gallup

Chapter 16: Segmentation
The Big Issue:
How to support a large address space with a lot of free space between
the stack and heap.

- Segmentation Generalized: Bases and Bounds

Segment: A contiguous portion of the address space of a particular length.
in this case we have the stack, heap, and the code.

Segmentation: Implementing a base and bounds pair per logical segment of the
address space. Segmentation allows the OS to put each of the different
segments to different parts of physical memory. 

The offset (virtual address) must fit below the bound, and the base is the
lowest point in memory for the segment. 

Sparse Address Spaces: Large physical address spaces with large amounts of unused address space. 

Segmentation Fault: Happens when memory accesss on a segmented machine is to
an illegal address. Specifically - the hardware traps into the OS and ending
that process. 

- Knowing Which Segment We Are Refering To?

The Explicit Approach: to chop up the address space into segements based on
the top few bits of the Virtual Address. example, taking the first 2 bits of a
virtual address and use those to differentiate the different segment, and the
rest becomes the offset.

The Implicit Approach: the hardware deteremines the segment by noticing how
the address was formed. Relating where the address was generated to where it
should be segmented. stuff from the stack must be in the stack segment.

- What About The Stack?

The Stack is different because it grows larger backwards compared to the code
and the heap segment. Stack has to be translated differently because of this.
The stack grows negative so, we use a bit differentiate which why segments
grow. Adding the negative offset to the base.

- Support for Sharing

Protection Bits: additional bits added on the segment, to say if a program can
be read, write, or execute code from a segment. 

- Fine-grained vs. Coarse-grained Segmentation

Coarse-grained: large sized coarse segments (code, heap, stack)

fine-grained: large number of smaller segments. 

Segment Table: hardware support to help support the creation of large number
of segments. 

- OS Support

Questions raised:
1. what to do about context switches... segment registers must be saved and
restored among hardware. 
2. Free space management ... different segments for each process and each
segment could be of a different size.
3. memory holes which leads to external fragmentation ... compaction of
segments by rearragning existing segments (very expensive and very memory
intensive, probably not the smartest solution) ... or doing a free-list
management algorithm that assigns memory to larger segments.  

Note: external fragmentation unavoidable, memory relocation algorithms only
reduce this. 


