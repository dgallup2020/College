January 30th continuing off of Fildcmd.txt

/var <--- variable files that will likely change during runtime
   /var/cache <--- application cache data
   /var/lib <--- state information generated by programs such as databases
   /var/lock <--- lock files
   /var/log <--- log files (syslogd,klogd,httpd,other daemons)
      /var/log/setup <--- slackware setup / configuraiton scripts
   /var/mail <--- user mailboxes (mbox files) 
   /var/spool <--- spool directory for task waiting to be processed
(cron,mail,print files)
   /var/tmp <--- temporary files to be preserved across reboots. 

Finding things in the file system:
>find <path> [<expressions...>][-ls][-exec <cmd> {} \;] 
  -seraches for files in a directory hierachy
  -Expressions:
    -a = AND : <exp1> -a <exp2> <--- both must be true (default)
    -o = OR : <exp1> -o <exp2>
    -name <pat> <--- Filename matches the wildcard <pat> (fun fact: quotations ar
e escape characters)
    -regex <pat> <--- file name matches the regex
    -iname/iregex <--- -name/-regex but ignore case
    -ntime <n> <--- File was modified n * 24 hours ago
    -perm <mode> <--- Files permissions are made.
    -user <user> <--- file owned by user
    -group <group> <--- file is group owned by group
-ls <--- list files in a long ls -l like listing
    -exec <cmd> {} \; <--- executes <cmd> for each file placing ht efile where
the {} are. Command is termintaed w/ and escaped semicolon. (\;)

>locate <name> 
  -Search for files in a location database (much faster than) 
  -requires the location db exist & be updated frequently. 

REGULAR EXPRESSIONS (man 7 regex) 
  <branch> ['|' <branch> ['|' <branch> ...]]
  branch:
   <piece>[<piece>[<piece>...]]
      matches for the first <piece> then the second and so on. Must match all
pieces
  piece:
   <atom> '*' <-- matches 0 or more of the atom
   <atom> '+' <-- matches atleast 1 or more of the atom. 
   <atom> '?' <-- matches 0 or 1 of the atom
   <atom><bound> <--- match <bound # of <atoms> 
   <atom> <--- match exactly one <atom>
  bound:
   '{' <num> '}' <--- match exactly <num> times
   '{' <min> ','[<max>'] '}'
  atom:
   ^ <--- matches the beginning of the line. 
   $ <--- matches the end of the line. 
   . <--- matches any single character
   [...] <--- bracket expression, matches any one characfter in []'s
   [^...] <--- not anything in there
   [n-n] <--- giving a range of optional  character
   '(' <regex> ')' <--- matches the <regex> as an atom. 
   '()' <--- matches an empty string
   any normal character <--- matches that character
   '\' escape character
examples:
   -lines starting with: ^foo
   -lines ending with: foo$
   -lines with only foo in there: ^foo$ 
   -lines starting with foo or bar: ^(foo|bar)
   -cs469 accounts: cs469[0-9]{2} 
   -7 digit phone #: [0-9]{3}-[0-9]{4} ... 
   -9 digit phone#: ([0-9]{3}-){2}[0-9]{4}
   -mac address: ([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}
   -a hex number: (0[xX])?[0-9a-fA-F]+ ... (0x10X)
   -a octal number: 0?[0-7]+
   -Quoted string w/ no escpates: "[^"]"
   -IP addresses: keep in mind this is 4 numbers up to 255 with 3 .

... scripting next class also a quiz...

  

   
